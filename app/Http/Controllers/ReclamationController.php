<?php

namespace App\Http\Controllers;

use App\Models\Reclamation;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use GuzzleHttp\Client;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;

class ReclamationController extends Controller
{
    public function index(Request $request)
    {
        $query = Reclamation::with('user')
            ->when($request->has('status') && $request->status !== 'all', function($q) use ($request) {
                return $q->where('statut', $request->status);
            })
            ->when($request->has('priority') && $request->priority !== 'all', function($q) use ($request) {
                return $q->where('priorite', $request->priority);
            })
            ->latest();

        $reclamations = $query->paginate(10);

        return view('reclamations.index', [
            'reclamations' => $reclamations,
            'currentStatus' => $request->input('status', 'all'),
            'currentPriority' => $request->input('priority', 'all')
        ]);
    }

    public function create()
    {
        return view('reclamations.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            'titre' => 'required|string|max:255',
            'description' => 'required',
            'categorie' => 'required|string',
            'priorite' => 'required|in:basse,moyenne,haute',
        ]);

        Reclamation::create([
            'user_id' => Auth::id(),
            'titre' => $request->titre,
            'description' => $request->description,
            'categorie' => $request->categorie,
            'priorite' => $request->priorite,
        ]);

        return redirect()->route('reclamations.index')->with('success', 'R√©clamation ajout√©e avec succ√®s');
    }

    public function show(Reclamation $reclamation)
    {
        $regenerate = request()->has('regenerate');
        $aiSolution = $this->generateAISolution($reclamation, $regenerate);
        
        return view('reclamations.show', compact('reclamation', 'aiSolution'));
    }

    /**
     * G√©n√®re une solution IA adapt√©e √† la description de la r√©clamation
     */
    private function generateAISolution(Reclamation $reclamation, $forceRegenerate = false)
    {
        $cacheKey = 'ai_solution_' . $reclamation->id;
        
        if ($forceRegenerate) {
            Cache::forget($cacheKey);
        }
        
        if (!$forceRegenerate && Cache::has($cacheKey)) {
            return Cache::get($cacheKey);
        }

        try {
            $solution = $this->callGeminiAPI($reclamation);
            Cache::put($cacheKey, $solution, 3600);
            return $solution;

        } catch (\Exception $e) {
            Log::error('Erreur g√©n√©ration solution IA: ' . $e->getMessage());
            $solution = $this->getDirectSolution($reclamation);
            Cache::put($cacheKey, $solution, 3600);
            return $solution;
        }
    }

    /**
     * Appelle l'API Gemini avec un prompt direct
     */
    private function callGeminiAPI(Reclamation $reclamation)
    {
        $client = new Client();
        $apiKey = env('GEMINI_API_KEY');
        
        if (empty($apiKey)) {
            throw new \Exception('Cl√© API Gemini non configur√©e');
        }

        $model = 'gemini-pro';
        $url = "https://generativelanguage.googleapis.com/v1beta/models/{$model}:generateContent?key={$apiKey}";

        $prompt = $this->buildDirectPrompt($reclamation);

        $response = $client->post($url, [
            'json' => [
                'contents' => [
                    [
                        'parts' => [
                            ['text' => $prompt]
                        ]
                    ]
                ],
                'generationConfig' => [
                    'temperature' => 0.8,
                    'maxOutputTokens' => 500,
                    'topP' => 0.9
                ]
            ],
            'headers' => [
                'Content-Type' => 'application/json',
            ],
            'timeout' => 30
        ]);

        $statusCode = $response->getStatusCode();
        $responseBody = $response->getBody()->getContents();

        if ($statusCode !== 200) {
            throw new \Exception("Erreur HTTP: {$statusCode}");
        }

        $responseData = json_decode($responseBody, true);

        if (!isset($responseData['candidates'][0]['content']['parts'][0]['text'])) {
            throw new \Exception('Structure de r√©ponse API invalide');
        }

        return $responseData['candidates'][0]['content']['parts'][0]['text'];
    }

    /**
     * Construit un prompt direct et simple adapt√© par cat√©gorie
     */
    private function buildDirectPrompt(Reclamation $reclamation)
    {
        $description = $reclamation->description;
        $title = $reclamation->titre;
        $category = $reclamation->categorie;
        $priority = $reclamation->priorite;

        $prompt = "Tu es un assistant expert en r√©solution de probl√®mes pour une biblioth√®que. Analyse cette r√©clamation et fournis une solution directe et pratique.\n\n";
        $prompt .= "INFORMATIONS DE LA R√âCLAMATION :\n";
        $prompt .= "Titre : {$title}\n";
        $prompt .= "Description : {$description}\n";
        $prompt .= "Cat√©gorie : {$category}\n";
        $prompt .= "Priorit√© : {$priority}\n\n";
        
        // Instructions sp√©cifiques par cat√©gorie
        $categoryInstructions = $this->getCategoryInstructions($category);
        $prompt .= "CONTEXTE SP√âCIFIQUE ({$category}) :\n";
        $prompt .= $categoryInstructions . "\n\n";
        
        $prompt .= "INSTRUCTIONS G√âN√âRALES :\n";
        $prompt .= "- R√©ponds UNIQUEMENT en fran√ßais\n";
        $prompt .= "- Sois direct et concis (maximum 200 mots)\n";
        $prompt .= "- Propose une solution pratique et r√©alisable\n";
        $prompt .= "- Adapte ton ton selon la priorit√© (urgent pour haute priorit√©)\n";
        $prompt .= "- Ne donne pas d'√©tapes num√©rot√©es, mais une r√©ponse fluide\n";
        $prompt .= "- Commence directement par la solution sans introduction\n";
        $prompt .= "- Utilise un ton professionnel mais accessible\n\n";
        $prompt .= "SOLUTION :";

        return $prompt;
    }

    /**
     * Retourne les instructions sp√©cifiques selon la cat√©gorie
     */
    private function getCategoryInstructions($category)
    {
        $instructions = [
            'technique' => "Concentre-toi sur les solutions techniques : diagnostic, r√©solution de bugs, optimisation de performance, probl√®mes de connexion, etc. Propose des √©tapes de d√©pannage et des solutions de contournement si n√©cessaire.",
            
            'livre' => "Concentre-toi sur les services li√©s aux livres : r√©sum√©s, recommandations, disponibilit√©, informations sur les ouvrages, suggestions de lecture, etc. Sois pr√©cis sur les d√©lais et les modalit√©s.",
            
            'compte' => "Concentre-toi sur les probl√®mes de compte utilisateur : connexion, mot de passe, profil, permissions, acc√®s, etc. Propose des solutions de r√©cup√©ration et des alternatives.",
            
            'service' => "Concentre-toi sur l'am√©lioration des services : suggestions, retours d'exp√©rience, qualit√©, satisfaction client, etc. Montre que les retours sont pris en compte.",
            
            'bibliotheque' => "Concentre-toi sur les informations g√©n√©rales de la biblioth√®que : horaires, localisation, services, proc√©dures, r√®glement, etc. Fournis des informations pr√©cises et utiles.",
            
            'emprunt' => "Concentre-toi sur les questions d'emprunt : d√©lais, prolongations, limites, retours, r√©servations, etc. Explique clairement les r√®gles et les possibilit√©s d'extension.",
            
            'autre' => "Concentre-toi sur une approche g√©n√©rale mais personnalis√©e. Analyse le contenu de la demande pour proposer la solution la plus adapt√©e possible."
        ];
        
        return $instructions[strtolower($category)] ?? $instructions['autre'];
    }

    /**
     * Solution directe de secours adapt√©e par cat√©gorie
     */
    private function getDirectSolution(Reclamation $reclamation)
    {
        $category = strtolower($reclamation->categorie);
        $priority = strtolower($reclamation->priorite);
        $description = $reclamation->description;
        $title = $reclamation->titre;
        
        // Solutions d√©taill√©es par cat√©gorie
        $categorySolutions = [
            'technique' => $this->getTechnicalSolution($title, $description),
            'livre' => $this->getBookSolution($title, $description),
            'compte' => $this->getAccountSolution($title, $description),
            'service' => $this->getServiceSolution($title, $description),
            'bibliotheque' => $this->getLibrarySolution($title, $description),
            'emprunt' => $this->getBorrowSolution($title, $description),
            'autre' => $this->getGeneralSolution($title, $description)
        ];
        
        $baseSolution = $categorySolutions[$category] ?? $categorySolutions['autre'];
        
        // Ajouter l'urgence selon la priorit√©
        if ($priority === 'haute') {
            $baseSolution = "üö® URGENT - " . $baseSolution . " Nous traitons votre demande en priorit√© absolue.";
        } elseif ($priority === 'moyenne') {
            $baseSolution = $baseSolution . " Nous vous tiendrons inform√© de l'avancement.";
        }
        
        return $baseSolution;
    }

    /**
     * Solution pour les probl√®mes techniques
     */
    private function getTechnicalSolution($title, $description)
    {
        if (stripos($description, 'connexion') !== false || stripos($title, 'connexion') !== false) {
            return "Probl√®me de connexion d√©tect√©. Nous allons v√©rifier votre compte et r√©tablir l'acc√®s. V√©rifiez d'abord votre mot de passe et votre connexion internet. Si le probl√®me persiste, nos techniciens interviendront dans l'heure.";
        }
        
        if (stripos($description, 'lent') !== false || stripos($description, 'performance') !== false) {
            return "Probl√®me de performance identifi√©. Nous optimisons nos serveurs r√©guli√®rement. Essayez de vider votre cache navigateur et de vous reconnecter. Si le probl√®me persiste, nous investiguerons c√¥t√© serveur.";
        }
        
        return "Probl√®me technique d√©tect√©. Notre √©quipe technique va diagnostiquer et corriger le dysfonctionnement. Nous vous contacterons avec une solution d√©finitive dans les plus brefs d√©lais.";
    }

    /**
     * Solution pour les demandes de livres
     */
    private function getBookSolution($title, $description)
    {
        if (stripos($description, 'r√©sum√©') !== false || stripos($description, 'resume') !== false) {
            return "Demande de r√©sum√© re√ßue. Nous allons vous fournir un r√©sum√© d√©taill√© du livre demand√©. Notre √©quipe de biblioth√©caires pr√©pare une analyse compl√®te qui vous sera envoy√©e par email.";
        }
        
        if (stripos($description, 'disponible') !== false || stripos($description, 'disponibilit√©') !== false) {
            return "V√©rification de disponibilit√© en cours. Nous allons consulter notre catalogue et vous proposer des alternatives si le livre n'est pas disponible. Vous recevrez une notification avec les options possibles.";
        }
        
        if (stripos($description, 'recommandation') !== false || stripos($description, 'suggestion') !== false) {
            return "Demande de recommandation re√ßue. Notre √©quipe va analyser vos pr√©f√©rences et vous proposer une s√©lection personnalis√©e de livres adapt√©s √† vos go√ªts.";
        }
        
        return "Demande concernant un livre re√ßue. Nous allons traiter votre demande et vous fournir les informations ou services demand√©s. Notre √©quipe de biblioth√©caires vous contactera rapidement.";
    }

    /**
     * Solution pour les probl√®mes de compte
     */
    private function getAccountSolution($title, $description)
    {
        if (stripos($description, 'mot de passe') !== false || stripos($description, 'password') !== false) {
            return "Probl√®me de mot de passe identifi√©. Utilisez la fonction 'Mot de passe oubli√©' sur la page de connexion. Si le probl√®me persiste, nous pouvons r√©initialiser votre compte manuellement.";
        }
        
        if (stripos($description, 'profil') !== false || stripos($description, 'informations') !== false) {
            return "Demande de modification de profil re√ßue. Vous pouvez modifier vos informations personnelles dans la section 'Mon Profil'. Si vous rencontrez des difficult√©s, nous vous aiderons √† mettre √† jour vos donn√©es.";
        }
        
        return "Probl√®me de compte d√©tect√©. Nous allons examiner votre profil et r√©tablir l'acc√®s. Nos techniciens interviennent g√©n√©ralement dans l'heure pour r√©soudre les probl√®mes de compte.";
    }

    /**
     * Solution pour les r√©clamations de service
     */
    private function getServiceSolution($title, $description)
    {
        if (stripos($description, 'am√©lioration') !== false || stripos($description, 'suggestion') !== false) {
            return "Suggestion d'am√©lioration bien re√ßue. Notre √©quipe va √©tudier votre proposition et l'int√©grer dans nos prochaines mises √† jour. Nous appr√©cions votre contribution √† l'am√©lioration de nos services.";
        }
        
        if (stripos($description, 'satisfaction') !== false || stripos($description, 'qualit√©') !== false) {
            return "Votre retour sur la qualit√© de nos services est important. Nous allons analyser vos commentaires et prendre les mesures n√©cessaires pour am√©liorer votre exp√©rience utilisateur.";
        }
        
        return "R√©clamation concernant nos services prise en compte. Nous allons examiner votre demande et am√©liorer ce point. Nous vous tiendrons inform√© des mesures prises pour r√©soudre cette situation.";
    }

    /**
     * Solution pour les probl√®mes de biblioth√®que
     */
    private function getLibrarySolution($title, $description)
    {
        if (stripos($description, 'horaire') !== false || stripos($description, 'ouverture') !== false) {
            return "Information sur les horaires demand√©e. Notre biblioth√®que est ouverte du lundi au vendredi de 8h √† 18h, et le samedi de 9h √† 16h. Nous sommes ferm√©s le dimanche et les jours f√©ri√©s.";
        }
        
        if (stripos($description, 'localisation') !== false || stripos($description, 'adresse') !== false) {
            return "Information de localisation fournie. Notre biblioth√®que se trouve au centre-ville, facilement accessible en transport en commun. Nous vous enverrons l'adresse exacte et les moyens d'acc√®s par email.";
        }
        
        return "Demande concernant la biblioth√®que re√ßue. Notre √©quipe va vous fournir toutes les informations n√©cessaires sur nos services, horaires et proc√©dures.";
    }

    /**
     * Solution pour les probl√®mes d'emprunt
     */
    private function getBorrowSolution($title, $description)
    {
        if (stripos($description, 'retard') !== false || stripos($description, 'retour') !== false) {
            return "Probl√®me de retour d'emprunt identifi√©. Vous pouvez prolonger votre emprunt en ligne ou nous contacter pour discuter d'une extension. Nous comprenons que des retards peuvent survenir.";
        }
        
        if (stripos($description, 'limite') !== false || stripos($description, 'quota') !== false) {
            return "Question sur les limites d'emprunt re√ßue. Vous pouvez emprunter jusqu'√† 5 livres simultan√©ment pour une dur√©e de 3 semaines. Des extensions sont possibles si aucun autre utilisateur n'a r√©serv√© le livre.";
        }
        
        return "Demande concernant l'emprunt re√ßue. Notre √©quipe va vous aider avec votre demande d'emprunt et vous expliquer nos proc√©dures et conditions.";
    }

    /**
     * Solution g√©n√©rale
     */
    private function getGeneralSolution($title, $description)
    {
        return "Votre demande est bien re√ßue. Notre √©quipe va analyser votre situation et vous apporter une r√©ponse personnalis√©e rapidement. Nous vous tiendrons inform√© de l'avancement.";
    }

    public function edit(Reclamation $reclamation)
    {
        return view('reclamations.edit', compact('reclamation'));
    }

    public function update(Request $request, Reclamation $reclamation)
    {
        $request->validate([
            'titre' => 'required|string|max:255',
            'description' => 'required',
            'categorie' => 'required|string',
            'priorite' => 'required|in:basse,moyenne,haute',
            'statut' => 'required|in:en_attente,en_cours,resolue',
        ]);

        $reclamation->update($request->all());

        return redirect()->route('reclamations.index')->with('success', 'R√©clamation mise √† jour');
    }

    public function destroy(Reclamation $reclamation)
    {
        $reclamation->delete();
        return redirect()->route('reclamations.index')->with('success', 'R√©clamation supprim√©e');
    }

    public function bienRecu(Reclamation $reclamation)
    {
        $reclamation->update([
            'statut' => 'en_cours'
        ]);

        return redirect()->back()->with('success', 'R√©clamation marqu√©e comme bien re√ßue.');
    }

    /**
     * Route pour r√©g√©n√©rer une solution via AJAX
     */
    public function regenerate(Reclamation $reclamation)
    {
        try {
            // V√©rifier que l'utilisateur a le droit de voir cette r√©clamation
            if (!Auth::check()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Authentification requise'
                ], 401);
            }

            // V√©rifier que l'utilisateur peut acc√©der √† cette r√©clamation
            if (Auth::user()->role !== 'admin' && $reclamation->user_id !== Auth::id()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Acc√®s non autoris√© √† cette r√©clamation'
                ], 403);
            }

            $cacheKey = 'ai_solution_' . $reclamation->id;
            Cache::forget($cacheKey);
            
            $newSolution = $this->generateAISolution($reclamation, true);
            
            // V√©rifier que la solution n'est pas vide
            if (empty(trim($newSolution))) {
                throw new \Exception('Solution g√©n√©r√©e vide');
            }
            
            return response()->json([
                'success' => true,
                'solution' => $newSolution,
                'timestamp' => now()->format('d/m/Y H:i:s')
            ]);
            
        } catch (\GuzzleHttp\Exception\RequestException $e) {
            Log::error('Erreur API Gemini lors de la r√©g√©n√©ration: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Erreur de connexion avec le service IA. Veuillez r√©essayer.'
            ], 503);
            
        } catch (\Exception $e) {
            Log::error('Erreur lors de la r√©g√©n√©ration: ' . $e->getMessage());
            
            // Fournir une solution de secours
            $fallbackSolution = $this->getDirectSolution($reclamation);
            
            return response()->json([
                'success' => true,
                'solution' => $fallbackSolution,
                'fallback' => true,
                'message' => 'Solution g√©n√©r√©e automatiquement (service IA temporairement indisponible)'
            ]);
        }
    }

    /**
     * Affiche l'interface du chatbot
     */
    public function chatbot()
    {
        return view('reclamations.chatbot');
    }

    /**
     * G√©n√®re une solution via le chatbot
     */
    public function chatbotGenerate(Request $request)
    {
        $request->validate([
            'description' => 'required|string|max:1000',
            'category' => 'nullable|string|in:technique,livre,compte,service,bibliotheque,emprunt,autre',
            'priority' => 'nullable|string|in:basse,moyenne,haute'
        ]);

        try {
            // Cr√©er une r√©clamation temporaire pour utiliser les m√©thodes existantes
            $tempReclamation = new Reclamation();
            $tempReclamation->titre = 'Demande via chatbot';
            $tempReclamation->description = $request->description;
            $tempReclamation->categorie = $request->category ?? 'autre';
            $tempReclamation->priorite = $request->priority ?? 'moyenne';

            // G√©n√©rer la solution
            $solution = $this->generateAISolution($tempReclamation, true);

            return response()->json([
                'success' => true,
                'solution' => $solution,
                'category' => $tempReclamation->categorie,
                'priority' => $tempReclamation->priorite,
                'timestamp' => now()->format('d/m/Y H:i:s')
            ]);

        } catch (\Exception $e) {
            Log::error('Erreur chatbot: ' . $e->getMessage());
            
            // Solution de secours
            $fallbackSolution = $this->getDirectSolution($tempReclamation ?? new Reclamation());
            
            return response()->json([
                'success' => true,
                'solution' => $fallbackSolution,
                'fallback' => true,
                'message' => 'Solution g√©n√©r√©e automatiquement (service IA temporairement indisponible)'
            ]);
        }
    }

    /**
     * G√©n√®re une solution pour une r√©clamation en utilisant l'API Gemini
     */
    public function generateSolution(Reclamation $reclamation)
    {
        try {
            $client = new Client();
            $apiKey = env('GEMINI_API_KEY');
            
            if (empty($apiKey)) {
                return response()->json([
                    'success' => false,
                    'message' => 'Cl√© API Gemini non configur√©e.'
                ], 500);
            }

            $prompt = "R√©ponds directement en fran√ßais √† cette recherche de livre :\n\n";
            $prompt .= "Titre : " . $reclamation->titre . "\n";
            $prompt .= "Description : " . $reclamation->description . "\n\n";
            $prompt .= "Donne des suggestions de livres directement.";

            $response = $client->post("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={$apiKey}", [
                'json' => [
                    'contents' => [
                        'parts' => [
                            ['text' => $prompt]
                        ]
                    ],
                    'generationConfig' => [
                        'temperature' => 0.7,
                        'maxOutputTokens' => 500,
                    ]
                ],
                'headers' => [
                    'Content-Type' => 'application/json',
                ],
                'timeout' => 30
            ]);

            $responseData = json_decode($response->getBody()->getContents(), true);

            if (!isset($responseData['candidates'][0]['content']['parts'][0]['text'])) {
                return response()->json([
                    'success' => false,
                    'message' => 'Format de r√©ponse inattendu.'
                ], 500);
            }

            $generatedText = $responseData['candidates'][0]['content']['parts'][0]['text'];

            return response()->json([
                'success' => true,
                'solution' => $generatedText
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Erreur lors de la g√©n√©ration: ' . $e->getMessage()
            ], 500);
        }
    }
}